name: Bug Bounty Recon + SAST + DAST

on:
  workflow_dispatch:
    inputs:
      zap_target:
        description: "Override ZAP target URL (optional)"
        required: false
        type: string
  schedule:
    - cron: "0 2 * * *"    # daily 02:00 UTC
  push:
    paths:
      - ".github/workflows/bugbounty-pipeline.yml"
      - "scripts/**"
      - "targets/**"
      - "wordlists/**"
      - "nuclei-templates/**"

permissions:
  contents: read
  security-events: write   # for Semgrep SARIF upload
  actions: read

concurrency:
  group: bugbounty-${{ github.ref }}
  cancel-in-progress: true

env:
  OUTDIR: out
  NUCLEI_TPLS: /tmp/nuclei-templates
  ZAP_TARGET: ${{ inputs.zap_target || secrets.ZAP_TARGET }}
  TZ: Africa/Cairo

jobs:

  recon:
    name: Recon (subdomains, resolve, alive)
    runs-on: ubuntu-latest
    container: alpine:3.20
    steps:
      - uses: actions/checkout@v4

      - name: Prepare workspace
        run: |
          apk add --no-cache bash curl jq git coreutils findutils grep
          mkdir -p $OUTDIR
          bash scripts/00-setup.sh
          echo "OUTDIR=$OUTDIR" >> $GITHUB_ENV

      - name: Run recon
        run: |
          bash scripts/10-recon.sh targets/roots.txt $OUTDIR

      - name: Upload recon artifacts
        uses: actions/upload-artifact@v4
        with:
          name: recon
          path: ${{ env.OUTDIR }}/recon/*

  ports:
    name: Probe & Port Scan
    runs-on: ubuntu-latest
    needs: recon
    container: alpine:3.20
    steps:
      - uses: actions/checkout@v4
      - name: Setup + download recon
        run: |
          apk add --no-cache bash curl jq git coreutils findutils grep
          bash scripts/00-setup.sh
      - uses: actions/download-artifact@v4
        with:
          name: recon
          path: recon/
      - name: Probe + scan
        run: |
          bash scripts/20-probe_ports.sh recon/alive.txt $OUTDIR
      - name: Upload port artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ports
          path: ${{ env.OUTDIR }}/ports/*

  content:
    name: Content Discovery
    runs-on: ubuntu-latest
    needs: ports
    container: alpine:3.20
    steps:
      - uses: actions/checkout@v4
      - name: Setup + download inputs
        run: |
          apk add --no-cache bash curl jq git coreutils findutils grep
          bash scripts/00-setup.sh
      - uses: actions/download-artifact@v4
        with:
          name: ports
          path: ports/
      - name: Content Discovery
        run: |
          bash scripts/30-content_discovery.sh ports/httpx_urls.txt wordlists/content.txt $OUTDIR
      - name: Upload content artifacts
        uses: actions/upload-artifact@v4
        with:
          name: content
          path: ${{ env.OUTDIR }}/content/*

  dast_nuclei:
    name: DAST – Nuclei
    runs-on: ubuntu-latest
    needs: [ports, content]
    container: alpine:3.20
    steps:
      - uses: actions/checkout@v4
      - name: Setup + get inputs
        run: |
          apk add --no-cache bash curl jq git coreutils findutils grep
          bash scripts/00-setup.sh
      - uses: actions/download-artifact@v4
        with:
          name: ports
          path: ports/
      - uses: actions/download-artifact@v4
        with:
          name: content
          path: content/
      - name: Run nuclei
        env:
          NUCLEI_TPLS: ${{ env.NUCLEI_TPLS }}
        run: |
          bash scripts/40-nuclei.sh ports/httpx_urls.txt $OUTDIR
      - name: Upload nuclei artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuclei
          path: ${{ env.OUTDIR }}/nuclei/*

  dast_zap:
    name: DAST – OWASP ZAP Baseline
    runs-on: ubuntu-latest
    needs: [ports]
    if: ${{ env.ZAP_TARGET != '' }}
    steps:
      - name: ZAP Baseline scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.ZAP_TARGET }}
          rules_file_name: ""
          cmd_options: "-a -m 5"   # active scan light touch, 5 min max
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap
          path: |
            report_html.html
            report_json.json
          if-no-files-found: ignore

  sast_semgrep_gitleaks_trivy:
    name: SAST – Semgrep + Gitleaks + Trivy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/owasp-top-ten
            p/secrets
            p/ci
          generateSarif: "1"
          publishToken: ""     # not using Semgrep Cloud
        env:
          SEMGREP_ENABLE_VERSION_CHECK: "0"

      - name: Upload Semgrep SARIF to GH Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Gitleaks (secrets in git history)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --no-banner -v --report-format sarif --report-path gitleaks.sarif

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Trivy FS (IaC & deps)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy.sarif"
          scanners: "vuln,secret,config"

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

  finalize:
    name: Summaries & (optional) Slack
    runs-on: ubuntu-latest
    needs: [recon, ports, content, dast_nuclei, dast_zap, sast_semgrep_gitleaks_trivy]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: nuclei
          path: nuclei/
      - uses: actions/download-artifact@v4
        with:
          name: zap
          path: zap/
          if-no-files-found: ignore
      - uses: actions/download-artifact@v4
        with:
          name: recon
          path: recon/
      - uses: actions/download-artifact@v4
        with:
          name: ports
          path: ports/
      - name: Make a short markdown summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          bash scripts/summarize.sh > summary.md
          echo "### Bug Bounty CI Summary" >> $GITHUB_STEP_SUMMARY
          cat summary.md >> $GITHUB_STEP_SUMMARY
      - name: Slack notify (optional)
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            Bug Bounty CI finished for ${{ github.repository }}@${{ github.ref_name }}
            See summary: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}